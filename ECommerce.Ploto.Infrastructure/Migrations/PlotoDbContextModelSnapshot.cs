// <auto-generated />
using System;
using ECommerce.Ploto.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.Ploto.Infrastructure.Migrations
{
    [DbContext(typeof(PlotoDbContext))]
    partial class PlotoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Cart.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Image.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Image");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ea109ed-1533-445d-a992-912366bf37dd"),
                            PermissionType = 1
                        },
                        new
                        {
                            Id = new Guid("c0a95b40-cac6-44c5-8263-2853a36f1567"),
                            PermissionType = 0
                        });
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7575e799-24dc-4da7-83fd-91f69b27fd0a"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("89bb75d0-1a77-40a2-9c62-fa3f2dbed533"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.RolePermissionModel.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a61da35-7818-4f46-b7ba-519ecbd8f538"),
                            PermissionId = new Guid("5ea109ed-1533-445d-a992-912366bf37dd"),
                            RoleId = new Guid("7575e799-24dc-4da7-83fd-91f69b27fd0a")
                        },
                        new
                        {
                            Id = new Guid("bca337c6-15a6-44a7-bc37-8f7ea1a5a854"),
                            PermissionId = new Guid("c0a95b40-cac6-44c5-8263-2853a36f1567"),
                            RoleId = new Guid("7575e799-24dc-4da7-83fd-91f69b27fd0a")
                        },
                        new
                        {
                            Id = new Guid("2ddccf32-eace-4e64-b3f0-d9091dfd972c"),
                            PermissionId = new Guid("5ea109ed-1533-445d-a992-912366bf37dd"),
                            RoleId = new Guid("89bb75d0-1a77-40a2-9c62-fa3f2dbed533")
                        });
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Createdby")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7eb79479-5223-4a0d-acd1-2afa658b3e65"),
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            PhoneNumber = "09386562888",
                            RoleId = new Guid("7575e799-24dc-4da7-83fd-91f69b27fd0a")
                        });
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Image.ProductImage", b =>
                {
                    b.HasBaseType("ECommerce.Ploto.Domain.Models.Image.Image");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ProductImage");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Image.UserAvaterImage", b =>
                {
                    b.HasBaseType("ECommerce.Ploto.Domain.Models.Image.Image");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("UserAvaterImage");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.CartItem", b =>
                {
                    b.HasOne("ECommerce.Ploto.Domain.Models.Cart.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Ploto.Domain.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Product", b =>
                {
                    b.OwnsOne("ECommerce.Ploto.Domain.Models.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision")
                                .HasColumnName("dimension_height");

                            b1.Property<double>("Length")
                                .HasColumnType("double precision")
                                .HasColumnName("dimension_length");

                            b1.Property<double>("Width")
                                .HasColumnType("double precision")
                                .HasColumnName("dimension_width");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("ECommerce.Ploto.Domain.Models.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Dimensions")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.RolePermissionModel.RolePermission", b =>
                {
                    b.HasOne("ECommerce.Ploto.Domain.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerce.Ploto.Domain.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.User", b =>
                {
                    b.HasOne("ECommerce.Ploto.Domain.Models.Image.UserAvaterImage", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("ECommerce.Ploto.Domain.Models.User", "AvatarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ECommerce.Ploto.Domain.Models.Cart.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("ECommerce.Ploto.Domain.Models.User", "CartId");

                    b.HasOne("ECommerce.Ploto.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerce.Ploto.Domain.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.OwnsOne("ECommerce.Ploto.Domain.Models.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Avenue")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<int>("HouseNO")
                                .HasColumnType("integer");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("7eb79479-5223-4a0d-acd1-2afa658b3e65"),
                                    Avenue = "resalat",
                                    City = "tehran",
                                    HouseNO = 54
                                });
                        });

                    b.OwnsOne("ECommerce.Ploto.Domain.Models.HomeNumber", "HomeNumber", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CityCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("7eb79479-5223-4a0d-acd1-2afa658b3e65"),
                                    CityCode = "021",
                                    Number = "123456799"
                                });
                        });

                    b.OwnsOne("ECommerce.Ploto.Domain.Models.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirtsName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("7eb79479-5223-4a0d-acd1-2afa658b3e65"),
                                    FirtsName = "pourya",
                                    LastName = "hosseyni"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Cart");

                    b.Navigation("HomeNumber")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Image.ProductImage", b =>
                {
                    b.HasOne("ECommerce.Ploto.Domain.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Cart.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommerce.Ploto.Domain.Models.Image.UserAvaterImage", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
